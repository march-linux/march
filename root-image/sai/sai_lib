#!/bin/bash

say() {
	tput setaf 5
	echo ":: $1"
	tput sgr0
}

# save ans to $2
ask() {
	tput setaf 4
	echo -n "=> $1  "
	tput sgr0
	read $2
}

yell() {
	tput setaf 1
	echo "!! $1  (see the error message above)"
	tput sgr0
	exit
}

prepare_disks() {
	: > $FSTAB
	for line in $(cat $FS); do
		part=$(echo "$line" | cut -d : -f 1)
		lbl=$(echo "$line" | cut -d : -f 2)
		action=$(echo "$line" | cut -d : -f 3)

		if [[ "$lbl" == swap ]]; then
			if [[ "$action" == format ]]; then
				mkswap -L swap "$part" || yell "sai can't format $part as swap"
			fi
			swapon "$part"

			echo "/dev/disk/by-label/swap swap swap defaults 0 0" >> $FSTAB
		else
			if [[ "$action" == format ]]; then
				mkfs.ext4 -L "$lbl" "$part" || yell "sai can't format '$part' as ext4"
			fi
			if [[ "$lbl" == root ]]; then
				mount -t ext4 "$part" /mnt || yell "sai can't mount $part as 'root'"
	
				echo "/dev/disk/by-label/root / ext4 defaults,noatime 0 1" >> $FSTAB
			else
				mkdir -p "/mnt/$lbl"
				mount -t ext4 "$part" "/mnt/$lbl" || yell "sai can't mount $part as '$lbl'"

				echo "/dev/disk/by-label/$lbl /$lbl ext4 defaults,noatime 0 2" >> $FSTAB
			fi
		fi
	done
}

find_disks() {
	find /dev/ -name sd[a-z] | cut -d / -f 3
}

find_parts() {
	find /dev/ -name sd[a-z][1-9] | cut -d / -f 3
}

get_size() {
	fdisk -l $1 2>/dev/null | sed -n 2p | cut -d , -f 1 | cut -d ' ' -f 3,4
}

avail_disks() {
	for disk in $(find_disks); do
		echo "$disk: $(get_size /dev/$disk)"
	done
}

avail_parts() {
	for part in $(find_parts); do
		echo "$part: $(get_size /dev/$part)"
	done
}

ask_cfdisk() {
	while true; do
		tput rev
		avail_disks
		tput sgr0

		ask "select a disk to partition? (type 'no' to skip)" disk
		if [[ "$disk" == no ]]; then
			break
		fi
		if [[ -b "/dev/$disk" ]]; then
			cfdisk "/dev/$disk"
		else
			say "sai can't find device: '/dev/$disk'"
		fi
	done
}

ask_mkfs() {
	: > $FS
	tput rev
	avail_parts
	tput sgr0

	ask "select a partition for 'root'? (format)" dev
	echo "/dev/$dev:root" >> $FS
	for lbl in boot swap home; do
		ask "select a partition for '$lbl'? (type 'no' if you don't need it; format/mount)" dev
		if [[ "$dev" != no ]]; then
			ask "format or mount $dev? ('f': format, 'm': mount)" f_or_m
			if [[ "$f_or_m" == m ]]; then
				action=mount
			else
				action=format
			fi
			echo "/dev/$dev:$lbl:$action" >> $FS
		fi
	done
}

# chroot_mount()
# prepares target system as a chroot
#
chroot_mount() {
	mkdir -p /mnt/sys /mnt/proc /mnt/dev
	mount -t sysfs sysfs /mnt/sys
	mount -t proc proc /mnt/proc
	mount -o bind /dev /mnt/dev
}

# chroot_umount()
# tears down chroot in target system
#
chroot_umount() {
	umount /mnt/sys /mnt/proc /mnt/dev
}

pacman_install() {
	mkdir -p /mnt/var/lib/pacman /mnt/var/cache/pacman/pkg
	while true; do
		chroot_mount
		pacman --root /mnt --cachedir /mnt/var/cache/pacman/pkg --noconfirm --needed \
		-Sy $(grep -v ^# /sai/packages.list)
		pacman_success=$?
		chroot_umount
		if [[ $pacman_success == 0 ]]; then
			break
		else
			ask "pacman has some problems. try again? (type 'no' to skip)" retry
			if [[ "$retry" == no ]]; then
				yell "sai stopped pacman"
			fi
		fi
	done
}

generate_syslinux_menu() {
	sed -i -e "s|root=/dev/sda3|root=/dev/disk/by-label/root|g" $syslinuxmenu || yell "sai can't find the bootloader menu"
}
